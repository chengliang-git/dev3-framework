package com.guanwei.framework.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import lombok.extern.slf4j.Slf4j;
import org.springdoc.core.customizers.GlobalOpenApiCustomizer;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpHeaders;

/**
 * Knife4jÈÖçÁΩÆÁ±ª
 * 
 * @author Enterprise Framework
 */
@Slf4j
@Configuration
@ConditionalOnProperty(prefix = "knife4j", name = "enable", havingValue = "true", matchIfMissing = false)
public class Knife4jConfig {

    /**
     * ÈÖçÁΩÆOpenAPI‰ø°ÊÅØ
     */
    @Bean("frameworkOpenAPI")
    public OpenAPI customOpenAPI() {
        log.info("üîß Ê°ÜÊû∂ÈªòËÆ§ OpenAPI ÈÖçÁΩÆÂ∑≤Âä†ËΩΩ");
        return new OpenAPI()
                .info(new Info()
                        .title("Enterprise Framework API")
                        .description("‰ºÅ‰∏öÁ∫ßSpring BootÊ°ÜÊû∂APIÊñáÊ°£")
                        .version("1.0.0")
                        .contact(new Contact()
                                .name("Enterprise Framework")
                                .email("support@enterprise.com")
                                .url("https://github.com/enterprise/framework"))
                        .license(new License()
                                .name("MIT License")
                                .url("https://opensource.org/licenses/MIT")))
                .components(new Components()
                        .addSecuritySchemes(HttpHeaders.AUTHORIZATION, new SecurityScheme()
                                .name(HttpHeaders.AUTHORIZATION)
                                .type(SecurityScheme.Type.APIKEY)
                                .in(SecurityScheme.In.HEADER)
                                .scheme("Bearer")
                                .bearerFormat("JWT")));
    }

    /**
     * ÂÖ®Â±ÄËá™ÂÆö‰πâÊâ©Â±ï
     * <p>
     * Âú®OpenAPIËßÑËåÉ‰∏≠ÔºåOperation ÊòØ‰∏Ä‰∏™Ë°®Á§∫ API Á´ØÁÇπÔºàEndpointÔºâÊàñÊìç‰ΩúÁöÑÂØπË±°„ÄÇ
     * ÊØè‰∏™Ë∑ØÂæÑÔºàPathÔºâÂØπË±°ÂèØ‰ª•ÂåÖÂê´‰∏Ä‰∏™ÊàñÂ§ö‰∏™ Operation ÂØπË±°ÔºåÁî®‰∫éÊèèËø∞‰∏éËØ•Ë∑ØÂæÑÁõ∏ÂÖ≥ËÅîÁöÑ‰∏çÂêå HTTP ÊñπÊ≥ïÔºà‰æãÂ¶Ç GET„ÄÅPOST„ÄÅPUT Á≠âÔºâ„ÄÇ
     */
    @Bean("frameworkGlobalOpenApiCustomizer")
    public GlobalOpenApiCustomizer globalOpenApiCustomizer() {
        return openApi -> {
            // ÂÖ®Â±ÄÊ∑ªÂä†Èâ¥ÊùÉÂèÇÊï∞
            if (openApi.getPaths() != null) {
                openApi.getPaths().forEach((s, pathItem) -> {
                    // Êé•Âè£Ê∑ªÂä†Èâ¥ÊùÉÂèÇÊï∞
                    pathItem.readOperations()
                            .forEach(operation -> operation
                                    .addSecurityItem(new SecurityRequirement().addList(HttpHeaders.AUTHORIZATION)));
                });
            }
        };
    }
}